{"/home/travis/build/npmtest/node-npmtest-odata-server/test.js":"/* istanbul instrument in package npmtest_odata_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-odata-server/lib.npmtest_odata_server.js":"/* istanbul instrument in package npmtest_odata_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_odata_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_odata_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-odata-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-odata-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_odata_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_odata_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_odata_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_odata_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_odata_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_odata_server.__dirname + '/lib.npmtest_odata_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-odata-server/node_modules/odata-server/index.js":"require('jaydata');\r\nwindow.DOMParser = require('xmldom').DOMParser;\r\n\r\n$data.ODataServer = function(type, db){\r\n    var connect = require('connect');\r\n    var basicAuth = require('basic-auth-connect');\r\n    var domain = require('domain');\r\n    \r\n    var config = typeof type === 'object' ? type : {};\r\n    var type = config.type || type;\r\n    config.database = config.database || db || type.name;\r\n    if (!config.provider) config.provider = {};\r\n    config.provider.name = config.provider.name || 'mongoDB';\r\n    config.provider.databaseName = config.provider.databaseName || config.database || db || type.name;\r\n    config.provider.responseLimit = config.provider.responseLimit || config.responseLimit || 100;\r\n    config.provider.user = config.provider.user || config.user;\r\n    config.provider.checkPermission = config.provider.checkPermission || config.checkPermission;\r\n    \r\n    var serviceType = $data.Class.defineEx(type.fullName + '.Service', [type, $data.ServiceBase]);\r\n    serviceType.annotateFromVSDoc();\r\n    \r\n    var basicAuthFn = function(req, res, next){\r\n        if (!config.basicAuth && !config.rootAuth) return next();\r\n        var callback = config.rootAuth ? function(){ basicAuth(config.rootAuth)(req, res, next); } : next;\r\n        if (typeof config.basicAuth == 'function'){\r\n            basicAuth(config.basicAuth)(req, res, callback);\r\n        }else if (typeof config.basicAuth == 'object' && config.basicAuth.username && config.basicAuth.password){\r\n            basicAuth(config.basicAuth.username, config.basicAuth.password)(req, res, callback);\r\n        }else callback();\r\n    };\r\n    \r\n    var corsFn = function(req, res, next){\r\n        if (config.CORS !== false){\r\n            res.setHeader('Access-Control-Allow-Origin', '*');\r\n            res.setHeader('Access-Control-Allow-Headers', 'X-PINGOTHER, Content-Type, MaxDataServiceVersion, DataServiceVersion, Authorization');\r\n            res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, PUT, MERGE, PATCH, DELETE');\r\n            if (req.method === 'OPTIONS'){\r\n                res.setHeader('Access-Control-Max-Age', '31536000');\r\n                res.setHeader('Cache-Control', 'max-age=31536000');\r\n                res.end();\r\n            }else{\r\n                next();\r\n            }\r\n        }else next();\r\n    };\r\n\r\n    var qs = require('qs');\r\n    var queryFn = function(req, res, next){\r\n        if (!req.query){\r\n            req.query = qs.parse(req._parsedUrl.query);\r\n            next();\r\n        }else next();\r\n    };\r\n\r\n    var bodyParser = require('body-parser');\r\n    var bodyFn = function(req, res, next){\r\n        if (!req.body){\r\n            bodyParser()(req, res, next);\r\n        }else next();\r\n    };\r\n    \r\n    var simpleBodyFn = function(req, res, next){\r\n        $data.JayService.OData.Utils.simpleBodyReader()(req, res, next);\r\n    };\r\n    \r\n    var errorFn = function(req, res, next, callback){\r\n        var reqd = domain.create();\r\n        reqd.add(req);\r\n        reqd.add(res);\r\n        reqd.add(next);\r\n        reqd.on('error', function(err){\r\n            try{\r\n                console.error(err);\r\n                next(err);\r\n            }catch (derr){\r\n                console.error('Error sending 500', derr, req.url);\r\n                reqd.dispose();\r\n            }\r\n        });\r\n        reqd.run(function(){\r\n            callback();\r\n        });\r\n    };\r\n\r\n    var errorHandler = require('errorhandler');\r\n    var errorHandlerFn = function(err, req, res, next){\r\n        if (config.errorHandler){\r\n            errorHandler.title = typeof config.errorHandler == 'string' ?  config.errorHandler : config.provider.databaseName;\r\n            errorHandler()(err, req, res, next);\r\n        }else next(err);\r\n    };\r\n\r\n    return function(req, res, next){\r\n        var self = this;\r\n        \r\n        if (config.provider.checkPermission){\r\n            Object.defineProperty(req, 'checkPermission', {\r\n                value: config.provider.checkPermission.bind(req),\r\n                enumerable: true\r\n            });\r\n            config.provider.checkPermission = req.checkPermission;\r\n        }\r\n\r\n        var schema = 'http';\r\n        if (req && req.headers) {\r\n            if (req.connection.encrypted || req.headers['X-Forwarded-Protocol'] === 'https' || req.headers['x-forwarded-protocol'] === 'https')\r\n                schema += 's';\r\n\r\n            req.fullRoute = (req.baseRoute || (schema + '://' + req.headers.host)) + (req.baseUrl || (req.originalUrl.replace(req.url, '')));\r\n        }\r\n        \r\n        basicAuthFn(req, res, function(){\r\n            config.provider.user = config.user = req.user || req.remoteUser || config.user || config.provider.user || 'anonymous';\r\n            corsFn(req, res, function(){\r\n                queryFn(req, res, function(){\r\n                    bodyFn(req, res, function(){\r\n                        simpleBodyFn(req, res, function(){\r\n                            errorFn(req, res, next, function(){\r\n                                $data.JayService.createAdapter(serviceType, function(){\r\n                                    return new serviceType(config.provider);\r\n                                }).call(self, req, res, function(err){\r\n                                    if (typeof err === 'string') err = new Error(err);\r\n                                    errorHandlerFn(err, req, res, next);\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    };\r\n};\r\n\r\n$data.createODataServer = function(type, path, port, host){\r\n    var config = typeof type === 'object' ? type : {};\r\n    var connect = require('connect');\r\n    var app = connect();\r\n\r\n    app.use(config.path || path || '/', $data.ODataServer(type));\r\n    app.listen(config.port || port || 80, config.host || host);\r\n};\r\n\r\nmodule.exports = exports = $data.ODataServer;\r\n","/home/travis/build/npmtest/node-npmtest-odata-server/node_modules/odata-server/newsreader.js":"require('odata-server');\r\n\r\nvar contextType = require('./newsreader/context.js');\r\nvar context = new $news.Types.NewsContext({ name: 'mongoDB', databaseName: 'newsreader', dbCreation: $data.storageProviders.DbCreationType.DropAllExistingTables });\r\ncontext.onReady(function(db){\r\n    contextType.generateTestData(db, function(count){\r\n        console.log('Test data upload successful. ', count, 'items inserted.');\r\n        console.log('Starting NewsReader OData server.');\r\n\r\n        /*$data.createODataServer({\r\n            type: contextType,\r\n            database: 'newsreader',\r\n        }, '/newsreader.svc', 52999, 'localhost');*/\r\n        \r\n        var connect = require('connect');\r\n        var app = connect();\r\n        \r\n        app.use('/newsreader.svc', $data.ODataServer({\r\n            type: contextType,\r\n            CORS: true,\r\n            database: 'newsreader',\r\n            responseLimit: 100,\r\n            basicAuth: function(username, password){\r\n                if (username == 'admin'){\r\n                    return password == 'admin';\r\n                }else return true;\r\n            },\r\n            checkPermission: function(access, user, entitySets, callback){\r\n                if (access & $data.Access.Create){\r\n                    if (user == 'admin') callback.success();\r\n                    else callback.error('Auth failed');\r\n                }else callback.success();\r\n            },\r\n            provider: {\r\n                howto: 'You can pass a customized JayData provider configuration in here.'\r\n            }\r\n        }));\r\n\r\n        app.listen(52999);\r\n        \r\n        console.log('NewsReader OData server listening on http://localhost:52999/newsreader.svc');\r\n    });\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-odata-server/node_modules/odata-server/newsreader/context.js":"$data.Class.define(\"$news.Types.Category\", $data.Entity, null, {\r\n    Id: { type: \"id\", key: true, computed: true },\r\n    Title: { type: \"string\" },\r\n    Articles: { type: \"Array\", elementType: \"$news.Types.Article\", inverseProperty: \"Category\" }\r\n}, null);\r\n\r\n$data.Class.define(\"$news.Types.Article\", $data.Entity, null, {\r\n    Id: { type: \"id\", key: true, computed: true },\r\n    //RowVersion: { type: $data.Blob, concurrencyMode: $data.ConcurrencyMode.Fixed },\r\n    Title: { type: \"string\" },\r\n    Lead: { type: \"string\" },\r\n    Body: { type: \"string\" },\r\n    CreateDate: { type: \"datetime\" },\r\n    Thumbnail_LowRes: { type: \"blob\" },\r\n    Thumbnail_HighRes: { type: \"blob\" },\r\n    Category: { type: \"$news.Types.Category\", inverseProperty: \"Articles\" },\r\n    Tags: { type: \"Array\", elementType: \"$news.Types.TagConnection\", inverseProperty: \"Article\" },\r\n    Author: { type: \"$news.Types.User\", inverseProperty: \"Articles\" },\r\n    Reviewer: { type: \"$news.Types.User\", inverseProperty: \"ReviewedArticles\" }\r\n}, null);\r\n\r\n$data.Class.define(\"$news.Types.TagConnection\", $data.Entity, null, {\r\n    Id: { type: \"id\", key: true, computed: true },\r\n    Article: { type: \"$news.Types.Article\", inverseProperty: \"Tags\" },\r\n    Tag: { type: \"$news.Types.Tag\", inverseProperty: \"Articles\" }\r\n}, null);\r\n\r\n$data.Class.define(\"$news.Types.Tag\", $data.Entity, null, {\r\n    Id: { type: \"id\", key: true, computed: true },\r\n    Title: { type: \"string\" },\r\n    Articles: { type: \"Array\", elementType: \"$news.Types.TagConnection\", inverseProperty: \"Tag\" }\r\n}, null);\r\n\r\n$data.Class.define(\"$news.Types.User\", $data.Entity, null, {\r\n    Id: { type: \"id\", key: true, computed: true },\r\n    LoginName: { type: \"string\" },\r\n    Email: { type: \"string\" },\r\n    Articles: { type: \"Array\", elementType: \"$news.Types.Article\", inverseProperty: \"Author\" },\r\n    ReviewedArticles: { type: \"Array\", elementType: \"$news.Types.Article\", inverseProperty: \"Reviewer\" },\r\n    Profile: { type: \"$news.Types.UserProfile\", inverseProperty: \"User\" }\r\n}, null);\r\n\r\n$data.Class.define(\"$news.Types.UserProfile\", $data.Entity, null, {\r\n    Id: { type: \"id\", key: true, computed: true },\r\n    FullName: { type: \"string\" },\r\n    Bio: { type: \"string\" },\r\n    Avatar: { type: \"blob\" },\r\n    Location: { type: \"$news.Types.Location\" },\r\n    Birthday: { type: \"date\" },\r\n    User: { type: \"$news.Types.User\", inverseProperty: \"Profile\", required: true }\r\n}, null);\r\n\r\n$data.Class.define(\"$news.Types.Location\", $data.Entity, null, {\r\n    Address: { type: \"string\" },\r\n    City: { type: \"string\" },\r\n    Zip: { type: \"int\" },\r\n    Country: { type: \"string\" }\r\n}, null);\r\n\r\n$data.Class.define(\"$news.Types.NewsContext\", $data.EntityContext, null, {\r\n    Categories: { type: $data.EntitySet, elementType: $news.Types.Category },\r\n    Articles: { type: $data.EntitySet, elementType: $news.Types.Article, roles: ['anonymous'] },\r\n    TagConnections: { type: $data.EntitySet, elementType: $news.Types.TagConnection },\r\n    Tags: { type: $data.EntitySet, elementType: $news.Types.Tag },\r\n    Users: { type: $data.EntitySet, elementType: $news.Types.User },\r\n    UserProfiles: { type: $data.EntitySet, elementType: $news.Types.UserProfile }\r\n}, null);\r\n\r\n$news.Types.NewsContext.generateTestData = function (context, callBack) {\r\n    var usr1 = new $news.Types.User({ LoginName: \"Usr1\", Email: \"usr1@company.com\", Profile: new $news.Types.UserProfile({ FullName: \"Full Name\", Bio: \"Bio1\", Birthday: new Date(Date.parse(\"1975/01/01\")), Location: new $news.Types.Location({ Zip: 2840, City: 'City1', Address: 'Address6', Country: 'Country1' }) }) });\r\n    var usr2 = new $news.Types.User({ LoginName: \"Usr2\", Email: \"usr2@company.com\", Profile: new $news.Types.UserProfile({ FullName: \"Full Name\", Bio: \"Bio2\", Birthday: new Date(Date.parse(\"1976/02/01\")), Location: new $news.Types.Location({ Zip: 1117, City: 'City2', Address: 'Address7', Country: 'Country2' }) }) });\r\n    var usr3 = new $news.Types.User({ LoginName: \"Usr3\", Email: \"usr3@company.com\", Profile: new $news.Types.UserProfile({ FullName: \"Full Name1\", Bio: \"Bio3\", Birthday: new Date(Date.parse(\"1977/03/01\")), Location: new $news.Types.Location({ Zip: 1115, City: 'City3', Address: 'Address8', Country: 'Country3' }) }) });\r\n    var usr4 = new $news.Types.User({ LoginName: \"Usr4\", Email: \"usr4@company.com\", Profile: new $news.Types.UserProfile({ FullName: \"Full Name1\", Bio: \"Bio4\", Birthday: new Date(Date.parse(\"1978/04/01\")), Location: new $news.Types.Location({ Zip: 1211, City: 'City4', Address: 'Address9', Country: 'Country4' }) }) });\r\n    var usr5 = new $news.Types.User({ LoginName: \"Usr5\", Email: \"usr5@company.com\", Profile: new $news.Types.UserProfile({ FullName: \"Full Name2\", Bio: \"Bio5\", Birthday: new Date(Date.parse(\"1979/05/01\")), Location: new $news.Types.Location({ Zip: 3451, City: 'City5', Address: 'Address0', Country: 'Country5' }) }) });\r\n    var usr6 = new $news.Types.User({ LoginName: \"StartsWithTest\", Email: \"swt@company.com\", Profile: new $news.Types.UserProfile({ FullName: \"Starts With Test\", Bio: \"Bio6\", Birthday: new Date(Date.parse(\"1980/06/01\")), Location: new $news.Types.Location({ Zip: 8475, City: 'City6', Address: 'Address7', Country: 'Country8' }) }) });\r\n    var cat1 = new $news.Types.Category({ Title: \"Sport\" });\r\n    var cat2 = new $news.Types.Category({ Title: \"World\" });\r\n    var cat3 = new $news.Types.Category({ Title: \"Politics\" });\r\n    var cat4 = new $news.Types.Category({ Title: \"Tech\" });\r\n    var cat5 = new $news.Types.Category({ Title: \"Health\" });\r\n    var tag1 = new $news.Types.Tag({ Title: \"Tag1\" });\r\n    var tag2 = new $news.Types.Tag({ Title: \"Tag2\" });\r\n    var tag3 = new $news.Types.Tag({ Title: \"Tag3\" });\r\n    var tag4 = new $news.Types.Tag({ Title: \"Tag4\" });\r\n    var tag5 = new $news.Types.Tag({ Title: \"Tag5\" });\r\n    context.Tags.add(tag4);\r\n    context.Tags.add(tag5);\r\n\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article1\", Lead: \"Lead1\", Body: \"Body1\", CreateDate: new Date(), Category: cat1, Author: usr1, Reviewer: usr6, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article2\", Lead: \"Lead2\", Body: \"Body2\", CreateDate: new Date(), Category: cat1, Author: usr2, Reviewer: usr5, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article3\", Lead: \"Lead3\", Body: \"Body3\", CreateDate: new Date(), Category: cat1, Author: usr3, Reviewer: usr4, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article4\", Lead: \"Lead4\", Body: \"Body4\", CreateDate: new Date(), Category: cat1, Author: usr4, Reviewer: usr3, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article5\", Lead: \"Lead5\", Body: \"Body5\", CreateDate: new Date(), Category: cat1, Author: usr5, Reviewer: usr2, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article21\", Lead: \"Lead21\", Body: \"Body21\", CreateDate: new Date(), Category: cat2, Author: usr1, Reviewer: usr1, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article22\", Lead: \"Lead22\", Body: \"Body22\", CreateDate: new Date(), Category: cat2, Author: usr2, Reviewer: usr6, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article23\", Lead: \"Lead23\", Body: \"Body23\", CreateDate: new Date(), Category: cat2, Author: usr3, Reviewer: usr5, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article24\", Lead: \"Lead24\", Body: \"Body24\", CreateDate: new Date(), Category: cat2, Author: usr4, Reviewer: usr4, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article25\", Lead: \"Lead25\", Body: \"Body25\", CreateDate: new Date(), Category: cat2, Author: usr5, Reviewer: usr3, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article31\", Lead: \"Lead31\", Body: \"Body31\", CreateDate: new Date(), Category: cat3, Author: usr1, Reviewer: usr2, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article32\", Lead: \"Lead32\", Body: \"Body32\", CreateDate: new Date(), Category: cat3, Author: usr2, Reviewer: usr1, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article33\", Lead: \"Lead33\", Body: \"Body33\", CreateDate: new Date(), Category: cat3, Author: usr3, Reviewer: usr6, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article34\", Lead: \"Lead34\", Body: \"Body34\", CreateDate: new Date(), Category: cat3, Author: usr4, Reviewer: usr5, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article35\", Lead: \"Lead35\", Body: \"Body35\", CreateDate: new Date(), Category: cat3, Author: usr5, Reviewer: usr4, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article41\", Lead: \"Lead41\", Body: \"Body41\", CreateDate: new Date(), Category: cat4, Author: usr1, Reviewer: usr3, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article42\", Lead: \"Lead42\", Body: \"Body42\", CreateDate: new Date(), Category: cat4, Author: usr2, Reviewer: usr2, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article43\", Lead: \"Lead43\", Body: \"Body43\", CreateDate: new Date(), Category: cat4, Author: usr3, Reviewer: usr1, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article44\", Lead: \"Lead44\", Body: \"Body44\", CreateDate: new Date(), Category: cat4, Author: usr4, Reviewer: usr6, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article45\", Lead: \"Lead45\", Body: \"Body45\", CreateDate: new Date(), Category: cat4, Author: usr5, Reviewer: usr5, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article51\", Lead: \"Lead51\", Body: \"Body51\", CreateDate: new Date(), Category: cat5, Author: usr1, Reviewer: usr4, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article52\", Lead: \"Lead52\", Body: \"Body52\", CreateDate: new Date(), Category: cat5, Author: usr2, Reviewer: usr3, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article53\", Lead: \"Lead53\", Body: \"Body53\", CreateDate: new Date(), Category: cat5, Author: usr3, Reviewer: usr2, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag3 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article54\", Lead: \"Lead54\", Body: \"Body54\", CreateDate: new Date(), Category: cat5, Author: usr4, Reviewer: usr1, Tags: [new $news.Types.TagConnection({ Tag: tag3 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article55\", Lead: \"Lead55\", Body: \"Body55\", CreateDate: new Date(), Category: cat5, Author: usr5, Reviewer: usr6, Tags: [new $news.Types.TagConnection({ Tag: tag1 }), new $news.Types.TagConnection({ Tag: tag2 })] }));\r\n\r\n    context.Articles.add(new $news.Types.Article({Title: \"Article65\", Lead: \"Lead65\", Body: \"Body65\", CreateDate: new Date(), Category: cat3, Author: usr6, Reviewer: usr5, Tags: [new $news.Types.TagConnection({ Tag: tag2 }), new $news.Types.TagConnection({ Tag: tag1 })] }));\r\n\r\n    context.saveChanges(function (count) {\r\n        if (callBack) {\r\n            callBack(count);\r\n        }\r\n    });\r\n};\r\n\r\nmodule.exports = exports = $news.Types.NewsContext;\r\n","/home/travis/build/npmtest/node-npmtest-odata-server/node_modules/odata-server/northwind.js":"require('odata-server');\r\n\r\nconsole.log('Starting Northwind OData server.');\r\n\r\n$data.createODataServer({\r\n    type: require('./northwind/context.js'),\r\n    basicAuth: function(username, password){\r\n        if (username == 'admin'){\r\n            return password == 'admin';\r\n        }else return true;\r\n    },\r\n    checkPermission: function(access, user, entitySets, callback){\r\n        if (access & $data.Access.Read){\r\n            callback.success();\r\n        }else if (user == 'admin') callback.success();\r\n        else callback.error('auth fail');\r\n    }\r\n}, '/Northwind.svc', 52999, 'localhost');\r\n\r\nconsole.log('Northwind OData server listening on http://localhost:52999/Northwind.svc');\r\n","/home/travis/build/npmtest/node-npmtest-odata-server/node_modules/odata-server/northwind/context.js":"$data.Entity.extend('NorthwindModel.Category', {\r\n    CategoryID: { key: true, type: 'id', nullable: false, computed: true },\r\n    CategoryName: { type: 'string', nullable: false, required: true, maxLength: 15 },\r\n    Description: { type: 'string', maxLength: Number.POSITIVE_INFINITY },\r\n    Picture: { type: 'blob', maxLength: Number.POSITIVE_INFINITY },\r\n    Products: { type: 'Array', elementType: 'NorthwindModel.Product', inverseProperty: 'Category' }\r\n});\r\n\r\n$data.Entity.extend('NorthwindModel.Customer', {\r\n    CustomerID: { key: true, type: 'string', nullable: false, required: true, maxLength: 5 },\r\n    CompanyName: { type: 'string', nullable: false, required: true, maxLength: 40 },\r\n    ContactName: { type: 'string', maxLength: 30 },\r\n    ContactTitle: { type: 'string', maxLength: 30 },\r\n    Address: { type: 'string', maxLength: 60 },\r\n    City: { type: 'string', maxLength: 15 },\r\n    Region: { type: 'string', maxLength: 15 },\r\n    PostalCode: { type: 'string', maxLength: 10 },\r\n    Country: { type: 'string', maxLength: 15 },\r\n    Phone: { type: 'string', maxLength: 24 },\r\n    Fax: { type: 'string', maxLength: 24 },\r\n    Orders: { type: 'Array', elementType: 'NorthwindModel.Order', inverseProperty: 'Customer' }\r\n});\r\n\r\n$data.Entity.extend('NorthwindModel.Employee', {\r\n    EmployeeID: { key: true, type: 'id', nullable: false, computed: true },\r\n    LastName: { type: 'string', nullable: false, required: true, maxLength: 20 },\r\n    FirstName: { type: 'string', nullable: false, required: true, maxLength: 10 },\r\n    Title: { type: 'string', maxLength: 30 },\r\n    BirthDate: { type: 'datetime' },\r\n    HireDate: { type: 'datetime' },\r\n    Address: { type: 'string', maxLength: 60 },\r\n    City: { type: 'string', maxLength: 15 },\r\n    Region: { type: 'string', maxLength: 15 },\r\n    PostalCode: { type: 'string', maxLength: 10 },\r\n    Country: { type: 'string', maxLength: 15 },\r\n    HomePhone: { type: 'string', maxLength: 24 },\r\n    Extension: { type: 'string', maxLength: 4 },\r\n    Photo: { type: 'blob', maxLength: Number.POSITIVE_INFINITY },\r\n    Notes: { type: 'string', maxLength: Number.POSITIVE_INFINITY },\r\n    ReportsTo: { type: 'int' },\r\n    Orders: { type: 'Array', elementType: 'NorthwindModel.Order', inverseProperty: 'Employee' }\r\n});\r\n\r\n$data.Entity.extend('NorthwindModel.Order_Detail', {\r\n    OrderID: { key: true, type: 'id', nullable: false, required: true },\r\n    ProductID: { key: true, type: 'id', nullable: false, required: true },\r\n    UnitPrice: { type: 'decimal', nullable: false, required: true },\r\n    Quantity: { type: 'int', nullable: false, required: true },\r\n    Discount: { type: 'number', nullable: false, required: true },\r\n    Product: { type: 'NorthwindModel.Product', required: true, inverseProperty: 'Order_Details' },\r\n    Order: { type: 'NorthwindModel.Order', required: true, inverseProperty: 'Order_Details' }\r\n});\r\n\r\n$data.Entity.extend('NorthwindModel.Order', {\r\n    OrderID: { key: true, type: 'id', nullable: false, required: true },\r\n    ShipName: { type: 'string', maxLength: 40 },\r\n    ShipAddress: { type: 'string', maxLength: 60 },\r\n    ShipCity: { type: 'string', maxLength: 15 },\r\n    ShipRegion: { type: 'string', maxLength: 15 },\r\n    ShipPostalCode: { type: 'string', maxLength: 10 },\r\n    ShipCountry: { type: 'string', maxLength: 15 },\r\n    OrderDate: { type: 'datetime' },\r\n    RequiredDate: { type: 'datetime' },\r\n    ShippedDate: { type: 'datetime' },\r\n    Freight: { type: 'decimal' },\r\n    Customer: { type: 'NorthwindModel.Customer', required: true, inverseProperty: 'Orders' },\r\n    Employee: { type: 'NorthwindModel.Employee', inverseProperty: 'Orders' },\r\n    Order_Details: { type: 'Array', elementType: 'NorthwindModel.Order_Detail', inverseProperty: 'Order' },\r\n    Shipper: { type: 'NorthwindModel.Shipper', inverseProperty: 'Orders' }\r\n});\r\n\r\n$data.Entity.extend('NorthwindModel.Product', {\r\n    ProductID: { key: true, type: 'id', nullable: false, computed: true },\r\n    ProductName: { type: 'string', nullable: false, required: true, maxLength: 40 },\r\n    EnglishName: { type: 'string', maxLength: 40 },\r\n    QuantityPerUnit: { type: 'string', maxLength: 20 },\r\n    UnitPrice: { type: 'decimal' },\r\n    UnitsInStock: { type: 'int' },\r\n    UnitsOnOrder: { type: 'int' },\r\n    ReorderLevel: { type: 'int' },\r\n    Discontinued: { type: 'bool', nullable: false, required: true },\r\n    Category: { type: 'NorthwindModel.Category', inverseProperty: 'Products' },\r\n    Order_Details: { type: 'Array', elementType: 'NorthwindModel.Order_Detail', inverseProperty: 'Product' },\r\n    Supplier: { type: 'NorthwindModel.Supplier', inverseProperty: 'Products' }\r\n});\r\n\r\n$data.Entity.extend('NorthwindModel.Shipper', {\r\n    ShipperID: { key: true, type: 'id', nullable: false, computed: true },\r\n    CompanyName: { type: 'string', nullable: false, required: true, maxLength: 40 },\r\n    Orders: { type: 'Array', elementType: 'NorthwindModel.Order', inverseProperty: 'Shipper' }\r\n});\r\n\r\n$data.Entity.extend('NorthwindModel.Supplier', {\r\n    SupplierID: { key: true, type: 'id', nullable: false, computed: true },\r\n    CompanyName: { type: 'string', nullable: false, required: true, maxLength: 40 },\r\n    ContactName: { type: 'string', maxLength: 30 },\r\n    ContactTitle: { type: 'string', maxLength: 30 },\r\n    Address: { type: 'string', maxLength: 60 },\r\n    City: { type: 'string', maxLength: 15 },\r\n    Region: { type: 'string', maxLength: 15 },\r\n    PostalCode: { type: 'string', maxLength: 10 },\r\n    Country: { type: 'string', maxLength: 15 },\r\n    Phone: { type: 'string', maxLength: 24 },\r\n    Fax: { type: 'string', maxLength: 24 },\r\n    Products: { type: 'Array', elementType: 'NorthwindModel.Product', inverseProperty: 'Supplier' }\r\n});\r\n\r\n$data.EntityContext.extend('NorthwindModel', {\r\n    Categories: { type: $data.EntitySet, elementType: NorthwindModel.Category },\r\n    Customers: { type: $data.EntitySet, elementType: NorthwindModel.Customer },\r\n    Employees: { type: $data.EntitySet, elementType: NorthwindModel.Employee },\r\n    Order_Details: { type: $data.EntitySet, elementType: NorthwindModel.Order_Detail },\r\n    Orders: { type: $data.EntitySet, elementType: NorthwindModel.Order },\r\n    Products: { type: $data.EntitySet, elementType: NorthwindModel.Product },\r\n    Shippers: { type: $data.EntitySet, elementType: NorthwindModel.Shipper },\r\n    Suppliers: { type: $data.EntitySet, elementType: NorthwindModel.Supplier }\r\n});\r\n\r\nmodule.exports = exports = NorthwindModel;\r\n"}